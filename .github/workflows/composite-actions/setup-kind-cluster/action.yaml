name: Setup KinD Cluster

description: The action that will seed a KinD cluster.

inputs:
  cluster-name:
    required: true
    description: The name of the KinD cluster
  kind-version:
    required: true
    description: The version of KinD
  kind-node-version:
    required: true
    description: The Node version used by KinD
  kubectl-version:
    required: true
    description: The version of Kubectl
  helm-version:
    required: true
    description: The version of Helm
  istio-version:
    required: true
    description: The version of Istio
  k8sgateway-api-version:
    required: false
    default: "" # If this is undefined the setup-kind script has its own default value
    description: The version of the gateway-api to use
  supported-ip-family:
    required: false
    default: "v4"
    description: IP family that KinD will use when bootstrapping. Defaults to v4

runs:
  using: "composite"
  steps:
    - name: Install kind
      uses: helm/kind-action@v1.12.0
      with:
        install_only: true
        version: ${{ inputs.kind-version }}
        kubectl_version: ${{ inputs.kubectl-version }}
    - uses: azure/setup-kubectl@v4
      id: kubectl
      with:
        version: ${{ inputs.kubectl-version }}
    - uses: azure/setup-helm@v4
      with:
        version: ${{ inputs.helm-version }}
    - name: Setup test env
      shell: bash
      env:
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        CLUSTER_NODE_VERSION: ${{ inputs.kind-node-version }}
        ISTIO_VERSION: ${{ inputs.istio-version }}
        CONFORMANCE_VERSION: ${{ inputs.k8sgateway-api-version }}
        setu: ${{ inputs.supported-ip-family }}
      run: ./ci/kind/setup-kind.sh
    - name: Verify cluster
      shell: bash
      run: kubectl get nodes
    - name: test coredns
      shell: bash
      run: ./ci/kind/verify-ipv6-dns.sh
    # - name: Helm install gloo
    #   shell: bash
    #   run: |
    #     tar xzvf ./gloo-1.0.1-dev.tgz

    #     ls -ltr
    #     echo "found files"
    #     kubectl apply -f gloo/crds
    #     kubectl create ns gloo-system || true
    #     helm template gloo ./gloo-1.0.1-dev.tgz \
    #       -f ./values.yaml \
    #       --namespace gloo-system \
    #       --create-namespace \
    #       --wait \
    #       --timeout=1h \
    #       --debug \
    #       --dry-run | kubectl apply -f -
    #     sleep 5
    #     kubectl get po -A -o wide -w
    # - name: Wait for Gloo deployments
    #   shell: bash
    #   run: |
    #     echo "Waiting for Gloo deployments to be ready..."
    #     kubectl -n gloo-system get deployments
    #     for deploy in $(kubectl -n gloo-system get deployments -o jsonpath='{.items[*].metadata.name}'); do
    #       echo "Waiting for deployment $deploy"
    #       kubectl -n gloo-system rollout status deployment/$deploy --timeout=5m
    #     done
    # - name: test
    #   shell: bash
    #   run: |
    #     sleep 5
    #     kubectl get po -A
    #     sleep 5
    #     ./ci/kind/test-dns.sh kube-system
